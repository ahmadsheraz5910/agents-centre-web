datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    properties    Properties[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

type Geometry {
    lat Float
    lng Float
}

type GoogleLocation {
    placeId     String
    description String
    geometry    Geometry
}

type Address {
    location GoogleLocation
    city  String
    state String
}

enum PROPERTY_PURPOSE {
    rent
    buy
}

enum PROPERTY_TYPE {
    apartment
    house
    land
    office
    shop
    warehouse
}

enum PROPERTY_STATUS {
    draft
    published
}

model Properties {
    id          String           @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    description String
    status      PROPERTY_STATUS 
    price       String
    purpose     PROPERTY_PURPOSE
    type        PROPERTY_TYPE
    address     Address
    thumbnail   String
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
    deletedAt   DateTime?
    postedById  String           @db.ObjectId
    postedBy    User             @relation(fields: [postedById], references: [id], onDelete: Cascade)
}
